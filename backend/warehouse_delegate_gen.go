// Package backend provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package backend

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Numbers Holds two numbers to be operated on
type Numbers struct {
	// Numberone First Number
	Numberone float32 `json:"numberone"`

	// Numbertwo Second Number
	Numbertwo float32 `json:"numbertwo"`
}

// Result Holds the result of the operation
type Result struct {
	// Resultingvalue result
	Resultingvalue *float32 `json:"resultingvalue,omitempty"`
}

// ResultString Holds the result of the operation
type ResultString struct {
	// Resultingvalue result
	Resultingvalue *string `json:"resultingvalue,omitempty"`
}

// Texts Holds two strings to be operated on
type Texts struct {
	// Stringone First Number
	Stringone string `json:"stringone"`

	// Stringtwo Second Number
	Stringtwo string `json:"stringtwo"`
}

// AddNumbersJSONRequestBody defines body for AddNumbers for application/json ContentType.
type AddNumbersJSONRequestBody = Numbers

// ConcatStringsJSONRequestBody defines body for ConcatStrings for application/json ContentType.
type ConcatStringsJSONRequestBody = Texts

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /addition)
	AddNumbers(ctx echo.Context) error

	// (POST /concat)
	ConcatStrings(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddNumbers converts echo context to params.
func (w *ServerInterfaceWrapper) AddNumbers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddNumbers(ctx)
	return err
}

// ConcatStrings converts echo context to params.
func (w *ServerInterfaceWrapper) ConcatStrings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConcatStrings(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/addition", wrapper.AddNumbers)
	router.POST(baseURL+"/concat", wrapper.ConcatStrings)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVTW/bMAz9KwK3o1Gn3c23bsCwXXKYdyt6UCSmUeGImsS4KwL/90GikzqIU6zAPm4U",
	"SD4+PpP0HgxtA3n0nKDZQzIb3OpiLnfbFcZiWkwmusCOPDTwhTqbFD+R8hKimNQKFQWMmtEq8lBBiPnN",
	"DguCRJLHc7jPLiZWUg0q4OeA0IwJMFSjxU90ntqiIW8v5g4VRPyxcxEtNHcTDlPQ+2MarR7RcC75DdOu",
	"44udb1DFEqFoXV7SuZvpW+Kcf+h1t5tpXvyz1C+wajk6//A/uCWpPMvtO/7kV0dFkn9nVCTyDaNy4FWN",
	"1ltGZdLTdFReOExBz0cl5zm/LvXYcZd9t9a6XFS1GHtnUK0pHjYFKugxJqF0fbXIpCmg18FBAx+uFlc3",
	"WQ/NmyJFrUes/AiUZkby1trpKkLBkw/+1Yp/eXTlFjHxR7LPGcmQZ/QFVIfQOVPS6sckBeUWZOt9xDU0",
	"8K5+ORb1eCnqA3rR4pTb8uQ8aGvRQhE6BfJJvvbNYvHHqIxrO8MkHj1DBbUhbzRf1lT807E9k/VTCWmP",
	"3r+hrOzUTDftyS4JW/R5n/6BvO1hY14TOe8ixr78Pu72sIsdNFDr4Or+Gob74VcAAAD//w6X9xV3BgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
